{"ast":null,"code":"import React from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Calculate=function Calculate(_ref){var selectedVehicle=_ref.selectedVehicle,selectedPlanet=_ref.selectedPlanet,vehicles=_ref.vehicles,planets=_ref.planets,setFinaltime=_ref.setFinaltime;var selectedVehicleOb=Object.values(selectedVehicle);var selectedPlanetOb=Object.values(selectedPlanet);var getTime=function getTime(){var timeTaken=0;var totalDistance=0;var totalSpeed=0;var distanceObj=[];var speedObj=[];if(selectedPlanet.length<=0||selectedVehicle.length<=0)return timeTaken;var _loop=function _loop(d){// get the destination distance\nvar destination=planets.filter(function(obj){return obj.name===selectedPlanetOb[d];});distanceObj.push(destination[0].distance);totalDistance=totalDistance+destination[0].distance;};for(var d=0;d<selectedPlanetOb.length;d++){_loop(d);}var _loop2=function _loop2(i){// match the list to get ditance and speed\nvar vehicle=vehicles.filter(function(obj){return obj.name===selectedVehicleOb[i];});speedObj.push(vehicle[0].speed);totalSpeed=totalSpeed+vehicle[0].speed;};for(var i=0;i<selectedVehicleOb.length;i++){_loop2(i);}// total dictance / total speed for each destination\nvar mapTimeTaken=distanceObj.map(function(num,i){return num/speedObj[i];});// sum time taken each destination\nvar numOr0=function numOr0(n){return isNaN(n)?0:n;};timeTaken=mapTimeTaken.reduce(function(a,b){return numOr0(a)+numOr0(b);});setFinaltime(timeTaken);return timeTaken;};getTime();return/*#__PURE__*/_jsx(\"div\",{className:\"missioncontroll_cal\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"missioncontroll_cal-box\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"missioncontroll_cal-label\",children:\"Time taken :\"}),/*#__PURE__*/_jsx(\"span\",{className:\"missioncontroll_cal-result\",selectedVehicle:selectedVehicle,children:getTime()})]})});};export default Calculate;","map":{"version":3,"sources":["/Users/meiliizzsuju/Documents/shippit/finding-falcone2/src/components/Calculate.js"],"names":["React","Calculate","selectedVehicle","selectedPlanet","vehicles","planets","setFinaltime","selectedVehicleOb","Object","values","selectedPlanetOb","getTime","timeTaken","totalDistance","totalSpeed","distanceObj","speedObj","length","d","destination","filter","obj","name","push","distance","i","vehicle","speed","mapTimeTaken","map","num","numOr0","n","isNaN","reduce","a","b"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst Calculate = ({selectedVehicle,selectedPlanet, vehicles, planets,setFinaltime}) => {\n  const selectedVehicleOb = Object.values(selectedVehicle)\n  const selectedPlanetOb = Object.values(selectedPlanet)\n\n\n  const getTime = () =>{\n\n    let timeTaken = 0;\n    let totalDistance = 0;\n    let totalSpeed = 0;\n    let distanceObj = [];\n    let speedObj = [];\n\n    if(selectedPlanet.length <= 0 || selectedVehicle.length <= 0) return timeTaken;\n\n\n    for(let d =0; d < selectedPlanetOb.length; d++){\n      // get the destination distance\n      let destination = planets.filter(obj => {\n        return obj.name === selectedPlanetOb[d]\n      })\n\n      distanceObj.push(destination[0].distance);\n\n      totalDistance = totalDistance + destination[0].distance;\n    }\n\n\n    for(let i =0; i < selectedVehicleOb.length; i++){\n      // match the list to get ditance and speed\n      let vehicle = vehicles.filter(obj => {\n        return obj.name === selectedVehicleOb[i]\n      })\n\n      speedObj.push(vehicle[0].speed);\n\n      totalSpeed = totalSpeed + vehicle[0].speed\n\n    }\n\n\n    // total dictance / total speed for each destination\n    let mapTimeTaken = distanceObj.map( (num,i) => {\n      return num/speedObj[i]\n    })\n\n    // sum time taken each destination\n    let numOr0 = n => isNaN(n) ? 0 : n;\n    timeTaken = mapTimeTaken.reduce((a, b) => numOr0(a) + numOr0(b));\n\n\n    setFinaltime(timeTaken);\n    return timeTaken\n  }\n\n  getTime();\n  \n  return (\n    <div className=\"missioncontroll_cal\">\n      <div className=\"missioncontroll_cal-box\">\n        <span className=\"missioncontroll_cal-label\">\n          Time taken :\n        </span>\n        <span className=\"missioncontroll_cal-result\" selectedVehicle={selectedVehicle}>\n          {getTime()}\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default Calculate;\n"]},"metadata":{},"sourceType":"module"}