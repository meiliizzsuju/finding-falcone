{"ast":null,"code":"var _jsxFileName = \"/Users/meiliizzsuju/Documents/shippit/finding-falcone2/src/components/Calculate.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Calculate = _ref => {\n  let {\n    selectedVehicle,\n    selectedPlanet,\n    vehicles,\n    planets,\n    setFinaltime\n  } = _ref;\n  const selectedVehicleOb = Object.values(selectedVehicle);\n  const selectedPlanetOb = Object.values(selectedPlanet);\n\n  const getTime = () => {\n    let timeTaken = 0;\n    let totalDistance = 0;\n    let totalSpeed = 0;\n    let distanceObj = [];\n    let speedObj = [];\n    if (selectedPlanet.length <= 0 || selectedVehicle.length <= 0) return timeTaken;\n\n    for (let d = 0; d < selectedPlanetOb.length; d++) {\n      // get the destination distance\n      let destination = planets.filter(obj => {\n        return obj.name === selectedPlanetOb[d];\n      });\n      distanceObj.push(destination[0].distance);\n      totalDistance = totalDistance + destination[0].distance;\n    }\n\n    for (let i = 0; i < selectedVehicleOb.length; i++) {\n      // match the list to get ditance and speed\n      let vehicle = vehicles.filter(obj => {\n        return obj.name === selectedVehicleOb[i];\n      });\n      speedObj.push(vehicle[0].speed);\n      totalSpeed = totalSpeed + vehicle[0].speed;\n    } // total dictance / total speed for each destination\n\n\n    let mapTimeTaken = distanceObj.map((num, i) => {\n      return num / speedObj[i];\n    }); // sum time taken each destination\n\n    let numOr0 = n => isNaN(n) ? 0 : n;\n\n    timeTaken = mapTimeTaken.reduce((a, b) => numOr0(a) + numOr0(b));\n    setFinaltime(timeTaken);\n    return timeTaken;\n  };\n\n  getTime();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"missioncontroll_cal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"missioncontroll_cal-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"missioncontroll_cal-label\",\n        children: \"Time taken :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"missioncontroll_cal-result\",\n        selectedVehicle: selectedVehicle,\n        children: getTime()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Calculate;\nexport default Calculate;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calculate\");","map":{"version":3,"sources":["/Users/meiliizzsuju/Documents/shippit/finding-falcone2/src/components/Calculate.js"],"names":["React","Calculate","selectedVehicle","selectedPlanet","vehicles","planets","setFinaltime","selectedVehicleOb","Object","values","selectedPlanetOb","getTime","timeTaken","totalDistance","totalSpeed","distanceObj","speedObj","length","d","destination","filter","obj","name","push","distance","i","vehicle","speed","mapTimeTaken","map","num","numOr0","n","isNaN","reduce","a","b"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst Calculate = ({selectedVehicle,selectedPlanet, vehicles, planets,setFinaltime}) => {\n  const selectedVehicleOb = Object.values(selectedVehicle)\n  const selectedPlanetOb = Object.values(selectedPlanet)\n\n\n  const getTime = () =>{\n\n    let timeTaken = 0;\n    let totalDistance = 0;\n    let totalSpeed = 0;\n    let distanceObj = [];\n    let speedObj = [];\n\n    if(selectedPlanet.length <= 0 || selectedVehicle.length <= 0) return timeTaken;\n\n\n    for(let d =0; d < selectedPlanetOb.length; d++){\n      // get the destination distance\n      let destination = planets.filter(obj => {\n        return obj.name === selectedPlanetOb[d]\n      })\n\n      distanceObj.push(destination[0].distance);\n\n      totalDistance = totalDistance + destination[0].distance;\n    }\n\n\n    for(let i =0; i < selectedVehicleOb.length; i++){\n      // match the list to get ditance and speed\n      let vehicle = vehicles.filter(obj => {\n        return obj.name === selectedVehicleOb[i]\n      })\n\n      speedObj.push(vehicle[0].speed);\n\n      totalSpeed = totalSpeed + vehicle[0].speed\n\n    }\n\n\n    // total dictance / total speed for each destination\n    let mapTimeTaken = distanceObj.map( (num,i) => {\n      return num/speedObj[i]\n    })\n\n    // sum time taken each destination\n    let numOr0 = n => isNaN(n) ? 0 : n;\n    timeTaken = mapTimeTaken.reduce((a, b) => numOr0(a) + numOr0(b));\n\n\n    setFinaltime(timeTaken);\n    return timeTaken\n  }\n\n  getTime();\n  \n  return (\n    <div className=\"missioncontroll_cal\">\n      <div className=\"missioncontroll_cal-box\">\n        <span className=\"missioncontroll_cal-label\">\n          Time taken :\n        </span>\n        <span className=\"missioncontroll_cal-result\" selectedVehicle={selectedVehicle}>\n          {getTime()}\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default Calculate;\n"]},"metadata":{},"sourceType":"module"}